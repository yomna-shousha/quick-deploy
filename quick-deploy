#!/bin/bash
set -e

# Quick Deploy - Main Script
# Lightweight orchestrator for modular deployment system

# Get script directory
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )"
LIB_DIR="$SCRIPT_DIR/lib"

# Source utility functions
source "$LIB_DIR/utils.sh"
source "$LIB_DIR/package-manager.sh"
source "$LIB_DIR/framework-detection.sh"

echo "üîç Analyzing project..."

# Check if we're in a valid project directory
if [ ! -f "package.json" ] && [ ! -f "pnpm-workspace.yaml" ] && [ ! -f "turbo.json" ]; then
    exit_with_help "No package.json found - this doesn't look like a web project" "‚Ä¢ Make sure you're in the correct directory
‚Ä¢ Initialize a new project:
  npm create astro@latest my-site
  cd my-site
  quick-deploy"
fi

# Handle monorepos
handle_monorepo

# Detect framework
FRAMEWORK=$(detect_framework)
print_success "Found $FRAMEWORK project"

# Detect and setup package manager
setup_package_manager

# Install dependencies
install_dependencies

# Check environment dependencies
check_environment_dependencies

# Framework-specific build handling
case $FRAMEWORK in
    "nextjs")
        source "$LIB_DIR/builders/nextjs.sh"
        handle_nextjs_build
        ;;
    "astro")
        source "$LIB_DIR/builders/astro.sh"
        handle_astro_build
        ;;
    "vite")
        source "$LIB_DIR/builders/vite.sh"
        handle_vite_build
        ;;
    "nuxt")
        source "$LIB_DIR/builders/nuxt.sh"
        handle_nuxt_build
        ;;
    "svelte")
        source "$LIB_DIR/builders/svelte.sh"
        handle_svelte_build
        ;;
    *)
        # Generic build
        generic_build
        ;;
esac

# Deployment
source "$LIB_DIR/deployers/workers.sh"
deploy_to_cloudflare

print_info "Useful commands:"
echo "‚Ä¢ Update: Run quick-deploy again"
echo "‚Ä¢ View logs: wrangler tail"
echo "‚Ä¢ List deployments: wrangler deployments list"
echo "üéâ Happy deploying!"
