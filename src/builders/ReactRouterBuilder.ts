import fs from 'fs-extra';
import { execa } from 'execa';
import { BaseBuilder, BuildConfig, BuildResult } from './BaseBuilder.js';

export class ReactRouterBuilder extends BaseBuilder {
  async configure(): Promise<void> {
    this.logger.info('Installing Cloudflare adapter for React Router...');
    
    const packageManager = await this.detectPackageManager();
    
    try {
      // Install wrangler for deployment
      await execa(packageManager, ['add', '-D', 'wrangler@latest'], { stdio: 'inherit' });
      this.logger.success('Wrangler installed');
      
      await this.createWranglerConfig();
      await this.createCloudflareFiles();
    } catch (error) {
      this.logger.error('Failed to configure React Router:', error);
      throw error;
    }
  }

  async build(config: BuildConfig): Promise<BuildResult> {
    this.logger.info('Building React Router project...');

    try {
      await this.runBuildCommand(config.packageManager);
      const buildDir = await this.findBuildDirectory(['build', 'dist']);

      return {
        success: true,
        buildDir,
        deploymentType: 'ssr' // React Router v7 is SSR
      };
    } catch (error) {
      this.logger.error('React Router build failed:', error);
      throw error;
    }
  }

  private async createWranglerConfig(): Promise<void> {
    if (!await fs.pathExists('wrangler.toml')) {
      const projectName = await this.getProjectName();
      
      const wranglerConfig = `#:schema node_modules/wrangler/config-schema.json
name = "${projectName.toLowerCase().replace(/[^a-z0-9-]/g, '-')}"
compatibility_date = "2025-03-01"
compatibility_flags = ["nodejs_compat"]
main = "./build/server/index.js"
assets = { directory = "./build/client" }

# Workers Logs
# Docs: https://developers.cloudflare.com/workers/observability/logs/workers-logs/
# Configuration: https://developers.cloudflare.com/workers/observability/logs/workers-logs/#enable-workers-logs
[observability]
enabled = true`;

      await fs.writeFile('wrangler.toml', wranglerConfig);
      this.logger.info('Created wrangler.toml');
    }
  }

  private async createCloudflareFiles(): Promise<void> {
    // Create worker-configuration.d.ts for TypeScript support
    if (await fs.pathExists('tsconfig.json') && !await fs.pathExists('worker-configuration.d.ts')) {
      const workerTypes = `// Generated by Quick Deploy
// After adding bindings to wrangler configuration, regenerate this interface via \`npm run cf-typegen\`
interface Env {
  // Add your environment variables here
  // Example:
  // MY_VAR: string;
  // API_KEY: string;
}`;

      await fs.writeFile('worker-configuration.d.ts', workerTypes);
      this.logger.info('Created worker-configuration.d.ts');
    }

    // Create .assetsignore in build/client if it doesn't exist
    await this.ensureBuildDirectory();
  }

  private async ensureBuildDirectory(): Promise<void> {
    // Create build/client directory if it doesn't exist
    await fs.ensureDir('build/client');
    
    // Create .assetsignore to exclude server files from assets
    if (!await fs.pathExists('build/client/.assetsignore')) {
      const assetsIgnoreContent = `# Exclude server files from Cloudflare Workers assets
server/
*.server.*
*.map
node_modules/`;

      await fs.writeFile('build/client/.assetsignore', assetsIgnoreContent);
      this.logger.info('Created .assetsignore in build/client/');
    }
  }

  private async getProjectName(): Promise<string> {
    try {
      const packageJson = await fs.readJson('package.json');
      return packageJson.name || 'react-router-app';
    } catch {
      return 'react-router-app';
    }
  }
}
